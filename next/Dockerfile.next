FROM node:20-alpine AS deps
WORKDIR /app
COPY package.json package-lock.json* pnpm-lock.yaml* yarn.lock* ./
RUN if [ -f package-lock.json ]; then npm ci --no-audit --silent; \
    elif [ -f yarn.lock ]; then yarn install --frozen-lockfile; \
    elif [ -f pnpm-lock.yaml ]; then corepack enable && pnpm i --frozen-lockfile; \
    else npm i --no-audit --silent; fi

FROM node:20-alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .
ENV NEXT_TELEMETRY_DISABLED=1
# Prisma engines need OpenSSL; install runtime libs in build stage too
RUN apk add --no-cache openssl libc6-compat
# Generate Prisma Client (no DB needed) using local CLI
RUN ./node_modules/.bin/prisma generate
RUN npm run build

FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production \
    PORT=3000 \
    HOSTNAME=0.0.0.0 \
    NEXT_TELEMETRY_DISABLED=1

# Install Prisma CLI globally to avoid npx downloads at runtime
RUN npm i -g prisma@5.19.1
# Install OpenSSL and glibc compatibility for Prisma engines
RUN apk add --no-cache openssl libc6-compat postgresql-client
## Ensure seed dependencies exist at runtime (standalone doesn't include dev deps)
# bcryptjs is used in prisma/seed.js to hash the initial password
RUN npm init -y >/dev/null 2>&1 || true \
 && npm i --no-audit --silent bcryptjs@2.4.3

# Copy standalone output
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/start.sh ./start.sh
RUN chmod +x ./start.sh

EXPOSE 3000
CMD ["./start.sh"]
