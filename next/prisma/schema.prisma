generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String?
  passwordHash String
  createdAt    DateTime  @default(now())
  projects     Project[]
  assignedTasks Task[]   @relation("TaskAssignee")
  role         UserRole  @default(client)
  messages     Message[]
}

enum UserRole {
  client
  staff
  admin
}

enum ProjectStatus {
  new
  in_progress
  scoping
  review
  done
}

model Project {
  id        String         @id @default(cuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  name      String
  status    ProjectStatus  @default(new)
  createdAt DateTime       @default(now())
  tasks     Task[]
  milestones Milestone[]
  messages   Message[]
  proposals  Proposal[]

  @@index([userId])
}

enum TaskStatus {
  todo
  in_progress
  done
}

model Task {
  id         String      @id @default(cuid())
  project    Project     @relation(fields: [projectId], references: [id])
  projectId  String
  title      String
  status     TaskStatus  @default(todo)
  assignee   User?       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId String?
  dueAt      DateTime?
  estimateH  Int?
  createdAt  DateTime    @default(now())

  @@index([projectId])
  @@index([assigneeId])
}

enum MilestoneStatus {
  planned
  in_progress
  done
}

model Milestone {
  id         String           @id @default(cuid())
  project    Project          @relation(fields: [projectId], references: [id])
  projectId  String
  title      String
  status     MilestoneStatus  @default(planned)
  dueAt      DateTime?
  createdAt  DateTime         @default(now())

  @@index([projectId])
}

model Message {
  id         String    @id @default(cuid())
  project    Project   @relation(fields: [projectId], references: [id])
  projectId  String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  body       String
  isInternal Boolean   @default(false)
  createdAt  DateTime  @default(now())

  @@index([projectId])
  @@index([authorId])
}

enum ProposalStatus {
  draft
  submitted
  approved
  rejected
}

model Proposal {
  id           String          @id @default(cuid())
  project      Project         @relation(fields: [projectId], references: [id])
  projectId    String
  title        String
  status       ProposalStatus  @default(draft)
  publicToken  String          @unique
  submittedAt  DateTime?
  approvedAt   DateTime?
  createdAt    DateTime        @default(now())
  items        ProposalItem[]

  @@index([projectId])
}

model ProposalItem {
  id              String    @id @default(cuid())
  proposal        Proposal  @relation(fields: [proposalId], references: [id])
  proposalId      String
  description     String
  qty             Int
  unitPriceCents  Int
  createdAt       DateTime  @default(now())

  @@index([proposalId])
}
